/* soapImagingBindingService.cpp
   Generated by gSOAP 2.8.66 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapImagingBindingService.h"

ImagingBindingService::ImagingBindingService() : soap(SOAP_IO_DEFAULT)
{	ImagingBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ImagingBindingService::ImagingBindingService(const ImagingBindingService& rhs)
{	soap_copy_context(this, &rhs);
}

ImagingBindingService::ImagingBindingService(const struct soap &_soap) : soap(_soap)
{ }

ImagingBindingService::ImagingBindingService(soap_mode iomode) : soap(iomode)
{	ImagingBindingService_init(iomode, iomode);
}

ImagingBindingService::ImagingBindingService(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	ImagingBindingService_init(imode, omode);
}

ImagingBindingService::~ImagingBindingService()
{
	this->destroy();
}

void ImagingBindingService::ImagingBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
        {"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
        {"saml1", "urn:oasis:names:tc:SAML:1.0:assertion", NULL, NULL},
        {"saml2", "urn:oasis:names:tc:SAML:2.0:assertion", NULL, NULL},
        {"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
        {"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
        {"wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", NULL, NULL},
        {"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
        {"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
        {"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
        {"wsdd", "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01", NULL, NULL},
        {"ns12", "http://www.onvif.org/ver20/analytics", NULL, NULL},
        {"ns2", "http://www.onvif.org/ver10/pacs", NULL, NULL},
        {"ns10", "http://www.onvif.org/ver20/analytics/radiometry", NULL, NULL},
        {"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
        {"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
        {"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
        {"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
        {"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
        {"wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
        {"ns1", "http://www.onvif.org/ver10/accesscontrol/wsdl", NULL, NULL},
        {"ns11", "http://www.onvif.org/ver10/network/wsdl/", NULL, NULL},
        {"ns13", "http://www.onvif.org/ver10/schedule/wsdl", NULL, NULL},
        {"ns14", "http://www.onvif.org/ver10/thermal/wsdl", NULL, NULL},
        {"ns3", "http://www.onvif.org/ver10/accessrules/wsdl", NULL, NULL},
        {"ns4", "http://www.onvif.org/ver10/actionengine/wsdl", NULL, NULL},
        {"ns5", "http://www.onvif.org/ver10/advancedsecurity/wsdl", NULL, NULL},
        {"ns6", "http://www.onvif.org/ver10/credential/wsdl", NULL, NULL},
        {"ns7", "http://www.onvif.org/ver10/doorcontrol/wsdl", NULL, NULL},
        {"ns8", "http://www.onvif.org/ver20/media/wsdl", NULL, NULL},
        {"ns9", "http://www.onvif.org/ver10/provisioning/wsdl", NULL, NULL},
        {"tad", "http://www.onvif.org/ver10/analyticsdevice/wsdl", NULL, NULL},
        {"tan", "http://www.onvif.org/ver20/analytics/wsdl", NULL, NULL},
        {"tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
        {"tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
        {"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
        {"timg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
        {"tls", "http://www.onvif.org/ver10/display/wsdl", NULL, NULL},
        {"tmd", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL},
        {"tptz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL},
        {"trc", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL},
        {"trp", "http://www.onvif.org/ver10/replay/wsdl", NULL, NULL},
        {"trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
        {"trv", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL},
        {"tse", "http://www.onvif.org/ver10/search/wsdl", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

void ImagingBindingService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void ImagingBindingService::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	ImagingBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
ImagingBindingService *ImagingBindingService::copy()
{	ImagingBindingService *dup = SOAP_NEW_UNMANAGED(ImagingBindingService(*(struct soap*)this));
	return dup;
}
#endif

ImagingBindingService& ImagingBindingService::operator=(const ImagingBindingService& rhs)
{	soap_done(this);
	soap_copy_context(this, &rhs);
	return *this;
}

int ImagingBindingService::soap_close_socket()
{	return soap_closesock(this);
}

int ImagingBindingService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int ImagingBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int ImagingBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int ImagingBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int ImagingBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void ImagingBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ImagingBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *ImagingBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void ImagingBindingService::soap_noheader()
{	this->header = NULL;
}

void ImagingBindingService::soap_header(struct _wsse__Security *wsse__Security, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct wsdd__AppSequenceType *wsdd__AppSequence)
{	::soap_header(this);
	this->header->wsse__Security = wsse__Security;
	this->header->wsa5__MessageID = wsa5__MessageID;
	this->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->header->wsa5__From = wsa5__From;
	this->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->header->wsa5__FaultTo = wsa5__FaultTo;
	this->header->wsa5__To = wsa5__To;
	this->header->wsa5__Action = wsa5__Action;
	this->header->chan__ChannelInstance = chan__ChannelInstance;
	this->header->wsdd__AppSequence = wsdd__AppSequence;
}

::SOAP_ENV__Header *ImagingBindingService::soap_header()
{	return this->header;
}

#ifndef WITH_NOIO
int ImagingBindingService::run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ImagingBindingService::ssl_run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->error;
}
#endif

SOAP_SOCKET ImagingBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET ImagingBindingService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ImagingBindingService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif
#endif

int ImagingBindingService::serve()
{
#ifndef WITH_FASTCGI
	this->keep_alive = this->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->keep_alive > 0 && this->max_keep_alive > 0)
			this->keep_alive--;
#endif
		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if ((dispatch() || (this->fserveloop && this->fserveloop(this))) && this->error && this->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___timg__GetServiceCapabilities(ImagingBindingService*);
static int serve___timg__GetImagingSettings(ImagingBindingService*);
static int serve___timg__SetImagingSettings(ImagingBindingService*);
static int serve___timg__GetOptions(ImagingBindingService*);
static int serve___timg__Move(ImagingBindingService*);
static int serve___timg__Stop(ImagingBindingService*);
static int serve___timg__GetStatus(ImagingBindingService*);
static int serve___timg__GetMoveOptions(ImagingBindingService*);
static int serve___timg__GetPresets(ImagingBindingService*);
static int serve___timg__GetCurrentPreset(ImagingBindingService*);
static int serve___timg__SetCurrentPreset(ImagingBindingService*);
static int serve___timg__GetServiceCapabilities_(ImagingBindingService*);
static int serve___timg__GetImagingSettings_(ImagingBindingService*);
static int serve___timg__SetImagingSettings_(ImagingBindingService*);
static int serve___timg__GetOptions_(ImagingBindingService*);
static int serve___timg__Move_(ImagingBindingService*);
static int serve___timg__Stop_(ImagingBindingService*);
static int serve___timg__GetStatus_(ImagingBindingService*);
static int serve___timg__GetMoveOptions_(ImagingBindingService*);

int ImagingBindingService::dispatch()
{
	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "timg:GetServiceCapabilities"))
		return serve___timg__GetServiceCapabilities(this);
	if (!soap_match_tag(this, this->tag, "timg:GetImagingSettings"))
		return serve___timg__GetImagingSettings(this);
	if (!soap_match_tag(this, this->tag, "timg:SetImagingSettings"))
		return serve___timg__SetImagingSettings(this);
	if (!soap_match_tag(this, this->tag, "timg:GetOptions"))
		return serve___timg__GetOptions(this);
	if (!soap_match_tag(this, this->tag, "timg:Move"))
		return serve___timg__Move(this);
	if (!soap_match_tag(this, this->tag, "timg:Stop"))
		return serve___timg__Stop(this);
	if (!soap_match_tag(this, this->tag, "timg:GetStatus"))
		return serve___timg__GetStatus(this);
	if (!soap_match_tag(this, this->tag, "timg:GetMoveOptions"))
		return serve___timg__GetMoveOptions(this);
	if (!soap_match_tag(this, this->tag, "timg:GetPresets"))
		return serve___timg__GetPresets(this);
	if (!soap_match_tag(this, this->tag, "timg:GetCurrentPreset"))
		return serve___timg__GetCurrentPreset(this);
	if (!soap_match_tag(this, this->tag, "timg:SetCurrentPreset"))
		return serve___timg__SetCurrentPreset(this);
	if (!soap_match_tag(this, this->tag, "timg:GetServiceCapabilities"))
		return serve___timg__GetServiceCapabilities_(this);
	if (!soap_match_tag(this, this->tag, "timg:GetImagingSettings"))
		return serve___timg__GetImagingSettings_(this);
	if (!soap_match_tag(this, this->tag, "timg:SetImagingSettings"))
		return serve___timg__SetImagingSettings_(this);
	if (!soap_match_tag(this, this->tag, "timg:GetOptions"))
		return serve___timg__GetOptions_(this);
	if (!soap_match_tag(this, this->tag, "timg:Move"))
		return serve___timg__Move_(this);
	if (!soap_match_tag(this, this->tag, "timg:Stop"))
		return serve___timg__Stop_(this);
	if (!soap_match_tag(this, this->tag, "timg:GetStatus"))
		return serve___timg__GetStatus_(this);
	if (!soap_match_tag(this, this->tag, "timg:GetMoveOptions"))
		return serve___timg__GetMoveOptions_(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve___timg__GetServiceCapabilities(ImagingBindingService *soap)
{	struct __timg__GetServiceCapabilities soap_tmp___timg__GetServiceCapabilities;
	_timg__GetServiceCapabilitiesResponse timg__GetServiceCapabilitiesResponse;
	timg__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___timg__GetServiceCapabilities(soap, &soap_tmp___timg__GetServiceCapabilities);
	if (!soap_get___timg__GetServiceCapabilities(soap, &soap_tmp___timg__GetServiceCapabilities, "-timg:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetServiceCapabilities(soap_tmp___timg__GetServiceCapabilities.timg__GetServiceCapabilities, timg__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__GetServiceCapabilitiesResponse.soap_put(soap, "timg:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__GetServiceCapabilitiesResponse.soap_put(soap, "timg:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__GetImagingSettings(ImagingBindingService *soap)
{	struct __timg__GetImagingSettings soap_tmp___timg__GetImagingSettings;
	_timg__GetImagingSettingsResponse timg__GetImagingSettingsResponse;
	timg__GetImagingSettingsResponse.soap_default(soap);
	soap_default___timg__GetImagingSettings(soap, &soap_tmp___timg__GetImagingSettings);
	if (!soap_get___timg__GetImagingSettings(soap, &soap_tmp___timg__GetImagingSettings, "-timg:GetImagingSettings", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetImagingSettings(soap_tmp___timg__GetImagingSettings.timg__GetImagingSettings, timg__GetImagingSettingsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__GetImagingSettingsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__GetImagingSettingsResponse.soap_put(soap, "timg:GetImagingSettingsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__GetImagingSettingsResponse.soap_put(soap, "timg:GetImagingSettingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__SetImagingSettings(ImagingBindingService *soap)
{	struct __timg__SetImagingSettings soap_tmp___timg__SetImagingSettings;
	_timg__SetImagingSettingsResponse timg__SetImagingSettingsResponse;
	timg__SetImagingSettingsResponse.soap_default(soap);
	soap_default___timg__SetImagingSettings(soap, &soap_tmp___timg__SetImagingSettings);
	if (!soap_get___timg__SetImagingSettings(soap, &soap_tmp___timg__SetImagingSettings, "-timg:SetImagingSettings", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->SetImagingSettings(soap_tmp___timg__SetImagingSettings.timg__SetImagingSettings, timg__SetImagingSettingsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__SetImagingSettingsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__SetImagingSettingsResponse.soap_put(soap, "timg:SetImagingSettingsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__SetImagingSettingsResponse.soap_put(soap, "timg:SetImagingSettingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__GetOptions(ImagingBindingService *soap)
{	struct __timg__GetOptions soap_tmp___timg__GetOptions;
	_timg__GetOptionsResponse timg__GetOptionsResponse;
	timg__GetOptionsResponse.soap_default(soap);
	soap_default___timg__GetOptions(soap, &soap_tmp___timg__GetOptions);
	if (!soap_get___timg__GetOptions(soap, &soap_tmp___timg__GetOptions, "-timg:GetOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetOptions(soap_tmp___timg__GetOptions.timg__GetOptions, timg__GetOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__GetOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__GetOptionsResponse.soap_put(soap, "timg:GetOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__GetOptionsResponse.soap_put(soap, "timg:GetOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__Move(ImagingBindingService *soap)
{	struct __timg__Move soap_tmp___timg__Move;
	_timg__MoveResponse timg__MoveResponse;
	timg__MoveResponse.soap_default(soap);
	soap_default___timg__Move(soap, &soap_tmp___timg__Move);
	if (!soap_get___timg__Move(soap, &soap_tmp___timg__Move, "-timg:Move", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Move(soap_tmp___timg__Move.timg__Move, timg__MoveResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__MoveResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__MoveResponse.soap_put(soap, "timg:MoveResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__MoveResponse.soap_put(soap, "timg:MoveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__Stop(ImagingBindingService *soap)
{	struct __timg__Stop soap_tmp___timg__Stop;
	_timg__StopResponse timg__StopResponse;
	timg__StopResponse.soap_default(soap);
	soap_default___timg__Stop(soap, &soap_tmp___timg__Stop);
	if (!soap_get___timg__Stop(soap, &soap_tmp___timg__Stop, "-timg:Stop", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Stop(soap_tmp___timg__Stop.timg__Stop, timg__StopResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__StopResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__StopResponse.soap_put(soap, "timg:StopResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__StopResponse.soap_put(soap, "timg:StopResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__GetStatus(ImagingBindingService *soap)
{	struct __timg__GetStatus soap_tmp___timg__GetStatus;
	_timg__GetStatusResponse timg__GetStatusResponse;
	timg__GetStatusResponse.soap_default(soap);
	soap_default___timg__GetStatus(soap, &soap_tmp___timg__GetStatus);
	if (!soap_get___timg__GetStatus(soap, &soap_tmp___timg__GetStatus, "-timg:GetStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetStatus(soap_tmp___timg__GetStatus.timg__GetStatus, timg__GetStatusResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__GetStatusResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__GetStatusResponse.soap_put(soap, "timg:GetStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__GetStatusResponse.soap_put(soap, "timg:GetStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__GetMoveOptions(ImagingBindingService *soap)
{	struct __timg__GetMoveOptions soap_tmp___timg__GetMoveOptions;
	_timg__GetMoveOptionsResponse timg__GetMoveOptionsResponse;
	timg__GetMoveOptionsResponse.soap_default(soap);
	soap_default___timg__GetMoveOptions(soap, &soap_tmp___timg__GetMoveOptions);
	if (!soap_get___timg__GetMoveOptions(soap, &soap_tmp___timg__GetMoveOptions, "-timg:GetMoveOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetMoveOptions(soap_tmp___timg__GetMoveOptions.timg__GetMoveOptions, timg__GetMoveOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__GetMoveOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__GetMoveOptionsResponse.soap_put(soap, "timg:GetMoveOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__GetMoveOptionsResponse.soap_put(soap, "timg:GetMoveOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__GetPresets(ImagingBindingService *soap)
{	struct __timg__GetPresets soap_tmp___timg__GetPresets;
	_timg__GetPresetsResponse timg__GetPresetsResponse;
	timg__GetPresetsResponse.soap_default(soap);
	soap_default___timg__GetPresets(soap, &soap_tmp___timg__GetPresets);
	if (!soap_get___timg__GetPresets(soap, &soap_tmp___timg__GetPresets, "-timg:GetPresets", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetPresets(soap_tmp___timg__GetPresets.timg__GetPresets, timg__GetPresetsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__GetPresetsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__GetPresetsResponse.soap_put(soap, "timg:GetPresetsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__GetPresetsResponse.soap_put(soap, "timg:GetPresetsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__GetCurrentPreset(ImagingBindingService *soap)
{	struct __timg__GetCurrentPreset soap_tmp___timg__GetCurrentPreset;
	_timg__GetCurrentPresetResponse timg__GetCurrentPresetResponse;
	timg__GetCurrentPresetResponse.soap_default(soap);
	soap_default___timg__GetCurrentPreset(soap, &soap_tmp___timg__GetCurrentPreset);
	if (!soap_get___timg__GetCurrentPreset(soap, &soap_tmp___timg__GetCurrentPreset, "-timg:GetCurrentPreset", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetCurrentPreset(soap_tmp___timg__GetCurrentPreset.timg__GetCurrentPreset, timg__GetCurrentPresetResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__GetCurrentPresetResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__GetCurrentPresetResponse.soap_put(soap, "timg:GetCurrentPresetResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__GetCurrentPresetResponse.soap_put(soap, "timg:GetCurrentPresetResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__SetCurrentPreset(ImagingBindingService *soap)
{	struct __timg__SetCurrentPreset soap_tmp___timg__SetCurrentPreset;
	_timg__SetCurrentPresetResponse timg__SetCurrentPresetResponse;
	timg__SetCurrentPresetResponse.soap_default(soap);
	soap_default___timg__SetCurrentPreset(soap, &soap_tmp___timg__SetCurrentPreset);
	if (!soap_get___timg__SetCurrentPreset(soap, &soap_tmp___timg__SetCurrentPreset, "-timg:SetCurrentPreset", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->SetCurrentPreset(soap_tmp___timg__SetCurrentPreset.timg__SetCurrentPreset, timg__SetCurrentPresetResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__SetCurrentPresetResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__SetCurrentPresetResponse.soap_put(soap, "timg:SetCurrentPresetResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__SetCurrentPresetResponse.soap_put(soap, "timg:SetCurrentPresetResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__GetServiceCapabilities_(ImagingBindingService *soap)
{	struct __timg__GetServiceCapabilities_ soap_tmp___timg__GetServiceCapabilities_;
	_timg__GetServiceCapabilitiesResponse timg__GetServiceCapabilitiesResponse;
	timg__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___timg__GetServiceCapabilities_(soap, &soap_tmp___timg__GetServiceCapabilities_);
	if (!soap_get___timg__GetServiceCapabilities_(soap, &soap_tmp___timg__GetServiceCapabilities_, "-timg:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetServiceCapabilities_(soap_tmp___timg__GetServiceCapabilities_.timg__GetServiceCapabilities, timg__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__GetServiceCapabilitiesResponse.soap_put(soap, "timg:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__GetServiceCapabilitiesResponse.soap_put(soap, "timg:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__GetImagingSettings_(ImagingBindingService *soap)
{	struct __timg__GetImagingSettings_ soap_tmp___timg__GetImagingSettings_;
	_timg__GetImagingSettingsResponse timg__GetImagingSettingsResponse;
	timg__GetImagingSettingsResponse.soap_default(soap);
	soap_default___timg__GetImagingSettings_(soap, &soap_tmp___timg__GetImagingSettings_);
	if (!soap_get___timg__GetImagingSettings_(soap, &soap_tmp___timg__GetImagingSettings_, "-timg:GetImagingSettings", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetImagingSettings_(soap_tmp___timg__GetImagingSettings_.timg__GetImagingSettings, timg__GetImagingSettingsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__GetImagingSettingsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__GetImagingSettingsResponse.soap_put(soap, "timg:GetImagingSettingsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__GetImagingSettingsResponse.soap_put(soap, "timg:GetImagingSettingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__SetImagingSettings_(ImagingBindingService *soap)
{	struct __timg__SetImagingSettings_ soap_tmp___timg__SetImagingSettings_;
	_timg__SetImagingSettingsResponse timg__SetImagingSettingsResponse;
	timg__SetImagingSettingsResponse.soap_default(soap);
	soap_default___timg__SetImagingSettings_(soap, &soap_tmp___timg__SetImagingSettings_);
	if (!soap_get___timg__SetImagingSettings_(soap, &soap_tmp___timg__SetImagingSettings_, "-timg:SetImagingSettings", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->SetImagingSettings_(soap_tmp___timg__SetImagingSettings_.timg__SetImagingSettings, timg__SetImagingSettingsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__SetImagingSettingsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__SetImagingSettingsResponse.soap_put(soap, "timg:SetImagingSettingsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__SetImagingSettingsResponse.soap_put(soap, "timg:SetImagingSettingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__GetOptions_(ImagingBindingService *soap)
{	struct __timg__GetOptions_ soap_tmp___timg__GetOptions_;
	_timg__GetOptionsResponse timg__GetOptionsResponse;
	timg__GetOptionsResponse.soap_default(soap);
	soap_default___timg__GetOptions_(soap, &soap_tmp___timg__GetOptions_);
	if (!soap_get___timg__GetOptions_(soap, &soap_tmp___timg__GetOptions_, "-timg:GetOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetOptions_(soap_tmp___timg__GetOptions_.timg__GetOptions, timg__GetOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__GetOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__GetOptionsResponse.soap_put(soap, "timg:GetOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__GetOptionsResponse.soap_put(soap, "timg:GetOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__Move_(ImagingBindingService *soap)
{	struct __timg__Move_ soap_tmp___timg__Move_;
	_timg__MoveResponse timg__MoveResponse;
	timg__MoveResponse.soap_default(soap);
	soap_default___timg__Move_(soap, &soap_tmp___timg__Move_);
	if (!soap_get___timg__Move_(soap, &soap_tmp___timg__Move_, "-timg:Move", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Move_(soap_tmp___timg__Move_.timg__Move, timg__MoveResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__MoveResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__MoveResponse.soap_put(soap, "timg:MoveResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__MoveResponse.soap_put(soap, "timg:MoveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__Stop_(ImagingBindingService *soap)
{	struct __timg__Stop_ soap_tmp___timg__Stop_;
	_timg__StopResponse timg__StopResponse;
	timg__StopResponse.soap_default(soap);
	soap_default___timg__Stop_(soap, &soap_tmp___timg__Stop_);
	if (!soap_get___timg__Stop_(soap, &soap_tmp___timg__Stop_, "-timg:Stop", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Stop_(soap_tmp___timg__Stop_.timg__Stop, timg__StopResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__StopResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__StopResponse.soap_put(soap, "timg:StopResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__StopResponse.soap_put(soap, "timg:StopResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__GetStatus_(ImagingBindingService *soap)
{	struct __timg__GetStatus_ soap_tmp___timg__GetStatus_;
	_timg__GetStatusResponse timg__GetStatusResponse;
	timg__GetStatusResponse.soap_default(soap);
	soap_default___timg__GetStatus_(soap, &soap_tmp___timg__GetStatus_);
	if (!soap_get___timg__GetStatus_(soap, &soap_tmp___timg__GetStatus_, "-timg:GetStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetStatus_(soap_tmp___timg__GetStatus_.timg__GetStatus, timg__GetStatusResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__GetStatusResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__GetStatusResponse.soap_put(soap, "timg:GetStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__GetStatusResponse.soap_put(soap, "timg:GetStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___timg__GetMoveOptions_(ImagingBindingService *soap)
{	struct __timg__GetMoveOptions_ soap_tmp___timg__GetMoveOptions_;
	_timg__GetMoveOptionsResponse timg__GetMoveOptionsResponse;
	timg__GetMoveOptionsResponse.soap_default(soap);
	soap_default___timg__GetMoveOptions_(soap, &soap_tmp___timg__GetMoveOptions_);
	if (!soap_get___timg__GetMoveOptions_(soap, &soap_tmp___timg__GetMoveOptions_, "-timg:GetMoveOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetMoveOptions_(soap_tmp___timg__GetMoveOptions_.timg__GetMoveOptions, timg__GetMoveOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	timg__GetMoveOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || timg__GetMoveOptionsResponse.soap_put(soap, "timg:GetMoveOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || timg__GetMoveOptionsResponse.soap_put(soap, "timg:GetMoveOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
