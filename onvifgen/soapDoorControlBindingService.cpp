/* soapDoorControlBindingService.cpp
   Generated by gSOAP 2.8.66 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapDoorControlBindingService.h"

DoorControlBindingService::DoorControlBindingService() : soap(SOAP_IO_DEFAULT)
{	DoorControlBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

DoorControlBindingService::DoorControlBindingService(const DoorControlBindingService& rhs)
{	soap_copy_context(this, &rhs);
}

DoorControlBindingService::DoorControlBindingService(const struct soap &_soap) : soap(_soap)
{ }

DoorControlBindingService::DoorControlBindingService(soap_mode iomode) : soap(iomode)
{	DoorControlBindingService_init(iomode, iomode);
}

DoorControlBindingService::DoorControlBindingService(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	DoorControlBindingService_init(imode, omode);
}

DoorControlBindingService::~DoorControlBindingService()
{
	this->destroy();
}

void DoorControlBindingService::DoorControlBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
        {"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
        {"saml1", "urn:oasis:names:tc:SAML:1.0:assertion", NULL, NULL},
        {"saml2", "urn:oasis:names:tc:SAML:2.0:assertion", NULL, NULL},
        {"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
        {"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
        {"wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", NULL, NULL},
        {"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
        {"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
        {"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
        {"wsdd", "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01", NULL, NULL},
        {"ns12", "http://www.onvif.org/ver20/analytics", NULL, NULL},
        {"ns2", "http://www.onvif.org/ver10/pacs", NULL, NULL},
        {"ns10", "http://www.onvif.org/ver20/analytics/radiometry", NULL, NULL},
        {"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
        {"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
        {"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
        {"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
        {"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
        {"wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
        {"ns1", "http://www.onvif.org/ver10/accesscontrol/wsdl", NULL, NULL},
        {"ns11", "http://www.onvif.org/ver10/network/wsdl/", NULL, NULL},
        {"ns13", "http://www.onvif.org/ver10/schedule/wsdl", NULL, NULL},
        {"ns14", "http://www.onvif.org/ver10/thermal/wsdl", NULL, NULL},
        {"ns3", "http://www.onvif.org/ver10/accessrules/wsdl", NULL, NULL},
        {"ns4", "http://www.onvif.org/ver10/actionengine/wsdl", NULL, NULL},
        {"ns5", "http://www.onvif.org/ver10/advancedsecurity/wsdl", NULL, NULL},
        {"ns6", "http://www.onvif.org/ver10/credential/wsdl", NULL, NULL},
        {"ns7", "http://www.onvif.org/ver10/doorcontrol/wsdl", NULL, NULL},
        {"ns8", "http://www.onvif.org/ver20/media/wsdl", NULL, NULL},
        {"ns9", "http://www.onvif.org/ver10/provisioning/wsdl", NULL, NULL},
        {"tad", "http://www.onvif.org/ver10/analyticsdevice/wsdl", NULL, NULL},
        {"tan", "http://www.onvif.org/ver20/analytics/wsdl", NULL, NULL},
        {"tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
        {"tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
        {"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
        {"timg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
        {"tls", "http://www.onvif.org/ver10/display/wsdl", NULL, NULL},
        {"tmd", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL},
        {"tptz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL},
        {"trc", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL},
        {"trp", "http://www.onvif.org/ver10/replay/wsdl", NULL, NULL},
        {"trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
        {"trv", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL},
        {"tse", "http://www.onvif.org/ver10/search/wsdl", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

void DoorControlBindingService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void DoorControlBindingService::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	DoorControlBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
DoorControlBindingService *DoorControlBindingService::copy()
{	DoorControlBindingService *dup = SOAP_NEW_UNMANAGED(DoorControlBindingService(*(struct soap*)this));
	return dup;
}
#endif

DoorControlBindingService& DoorControlBindingService::operator=(const DoorControlBindingService& rhs)
{	soap_done(this);
	soap_copy_context(this, &rhs);
	return *this;
}

int DoorControlBindingService::soap_close_socket()
{	return soap_closesock(this);
}

int DoorControlBindingService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int DoorControlBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int DoorControlBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int DoorControlBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int DoorControlBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void DoorControlBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void DoorControlBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *DoorControlBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void DoorControlBindingService::soap_noheader()
{	this->header = NULL;
}

void DoorControlBindingService::soap_header(struct _wsse__Security *wsse__Security, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct wsdd__AppSequenceType *wsdd__AppSequence)
{	::soap_header(this);
	this->header->wsse__Security = wsse__Security;
	this->header->wsa5__MessageID = wsa5__MessageID;
	this->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->header->wsa5__From = wsa5__From;
	this->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->header->wsa5__FaultTo = wsa5__FaultTo;
	this->header->wsa5__To = wsa5__To;
	this->header->wsa5__Action = wsa5__Action;
	this->header->chan__ChannelInstance = chan__ChannelInstance;
	this->header->wsdd__AppSequence = wsdd__AppSequence;
}

::SOAP_ENV__Header *DoorControlBindingService::soap_header()
{	return this->header;
}

#ifndef WITH_NOIO
int DoorControlBindingService::run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int DoorControlBindingService::ssl_run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->error;
}
#endif

SOAP_SOCKET DoorControlBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET DoorControlBindingService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int DoorControlBindingService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif
#endif

int DoorControlBindingService::serve()
{
#ifndef WITH_FASTCGI
	this->keep_alive = this->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->keep_alive > 0 && this->max_keep_alive > 0)
			this->keep_alive--;
#endif
		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if ((dispatch() || (this->fserveloop && this->fserveloop(this))) && this->error && this->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns7__GetServiceCapabilities(DoorControlBindingService*);
static int serve___ns7__GetDoorInfoList(DoorControlBindingService*);
static int serve___ns7__GetDoorInfo(DoorControlBindingService*);
static int serve___ns7__GetDoorState(DoorControlBindingService*);
static int serve___ns7__AccessDoor(DoorControlBindingService*);
static int serve___ns7__LockDoor(DoorControlBindingService*);
static int serve___ns7__UnlockDoor(DoorControlBindingService*);
static int serve___ns7__BlockDoor(DoorControlBindingService*);
static int serve___ns7__LockDownDoor(DoorControlBindingService*);
static int serve___ns7__LockDownReleaseDoor(DoorControlBindingService*);
static int serve___ns7__LockOpenDoor(DoorControlBindingService*);
static int serve___ns7__LockOpenReleaseDoor(DoorControlBindingService*);
static int serve___ns7__DoubleLockDoor(DoorControlBindingService*);

int DoorControlBindingService::dispatch()
{
	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns7:GetServiceCapabilities"))
		return serve___ns7__GetServiceCapabilities(this);
	if (!soap_match_tag(this, this->tag, "ns7:GetDoorInfoList"))
		return serve___ns7__GetDoorInfoList(this);
	if (!soap_match_tag(this, this->tag, "ns7:GetDoorInfo"))
		return serve___ns7__GetDoorInfo(this);
	if (!soap_match_tag(this, this->tag, "ns7:GetDoorState"))
		return serve___ns7__GetDoorState(this);
	if (!soap_match_tag(this, this->tag, "ns7:AccessDoor"))
		return serve___ns7__AccessDoor(this);
	if (!soap_match_tag(this, this->tag, "ns7:LockDoor"))
		return serve___ns7__LockDoor(this);
	if (!soap_match_tag(this, this->tag, "ns7:UnlockDoor"))
		return serve___ns7__UnlockDoor(this);
	if (!soap_match_tag(this, this->tag, "ns7:BlockDoor"))
		return serve___ns7__BlockDoor(this);
	if (!soap_match_tag(this, this->tag, "ns7:LockDownDoor"))
		return serve___ns7__LockDownDoor(this);
	if (!soap_match_tag(this, this->tag, "ns7:LockDownReleaseDoor"))
		return serve___ns7__LockDownReleaseDoor(this);
	if (!soap_match_tag(this, this->tag, "ns7:LockOpenDoor"))
		return serve___ns7__LockOpenDoor(this);
	if (!soap_match_tag(this, this->tag, "ns7:LockOpenReleaseDoor"))
		return serve___ns7__LockOpenReleaseDoor(this);
	if (!soap_match_tag(this, this->tag, "ns7:DoubleLockDoor"))
		return serve___ns7__DoubleLockDoor(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve___ns7__GetServiceCapabilities(DoorControlBindingService *soap)
{	struct __ns7__GetServiceCapabilities soap_tmp___ns7__GetServiceCapabilities;
	_ns7__GetServiceCapabilitiesResponse ns7__GetServiceCapabilitiesResponse;
	ns7__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___ns7__GetServiceCapabilities(soap, &soap_tmp___ns7__GetServiceCapabilities);
	if (!soap_get___ns7__GetServiceCapabilities(soap, &soap_tmp___ns7__GetServiceCapabilities, "-ns7:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetServiceCapabilities(soap_tmp___ns7__GetServiceCapabilities.ns7__GetServiceCapabilities, ns7__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns7__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns7__GetServiceCapabilitiesResponse.soap_put(soap, "ns7:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns7__GetServiceCapabilitiesResponse.soap_put(soap, "ns7:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns7__GetDoorInfoList(DoorControlBindingService *soap)
{	struct __ns7__GetDoorInfoList soap_tmp___ns7__GetDoorInfoList;
	_ns7__GetDoorInfoListResponse ns7__GetDoorInfoListResponse;
	ns7__GetDoorInfoListResponse.soap_default(soap);
	soap_default___ns7__GetDoorInfoList(soap, &soap_tmp___ns7__GetDoorInfoList);
	if (!soap_get___ns7__GetDoorInfoList(soap, &soap_tmp___ns7__GetDoorInfoList, "-ns7:GetDoorInfoList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetDoorInfoList(soap_tmp___ns7__GetDoorInfoList.ns7__GetDoorInfoList, ns7__GetDoorInfoListResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns7__GetDoorInfoListResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns7__GetDoorInfoListResponse.soap_put(soap, "ns7:GetDoorInfoListResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns7__GetDoorInfoListResponse.soap_put(soap, "ns7:GetDoorInfoListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns7__GetDoorInfo(DoorControlBindingService *soap)
{	struct __ns7__GetDoorInfo soap_tmp___ns7__GetDoorInfo;
	_ns7__GetDoorInfoResponse ns7__GetDoorInfoResponse;
	ns7__GetDoorInfoResponse.soap_default(soap);
	soap_default___ns7__GetDoorInfo(soap, &soap_tmp___ns7__GetDoorInfo);
	if (!soap_get___ns7__GetDoorInfo(soap, &soap_tmp___ns7__GetDoorInfo, "-ns7:GetDoorInfo", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetDoorInfo(soap_tmp___ns7__GetDoorInfo.ns7__GetDoorInfo, ns7__GetDoorInfoResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns7__GetDoorInfoResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns7__GetDoorInfoResponse.soap_put(soap, "ns7:GetDoorInfoResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns7__GetDoorInfoResponse.soap_put(soap, "ns7:GetDoorInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns7__GetDoorState(DoorControlBindingService *soap)
{	struct __ns7__GetDoorState soap_tmp___ns7__GetDoorState;
	_ns7__GetDoorStateResponse ns7__GetDoorStateResponse;
	ns7__GetDoorStateResponse.soap_default(soap);
	soap_default___ns7__GetDoorState(soap, &soap_tmp___ns7__GetDoorState);
	if (!soap_get___ns7__GetDoorState(soap, &soap_tmp___ns7__GetDoorState, "-ns7:GetDoorState", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetDoorState(soap_tmp___ns7__GetDoorState.ns7__GetDoorState, ns7__GetDoorStateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns7__GetDoorStateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns7__GetDoorStateResponse.soap_put(soap, "ns7:GetDoorStateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns7__GetDoorStateResponse.soap_put(soap, "ns7:GetDoorStateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns7__AccessDoor(DoorControlBindingService *soap)
{	struct __ns7__AccessDoor soap_tmp___ns7__AccessDoor;
	_ns7__AccessDoorResponse ns7__AccessDoorResponse;
	ns7__AccessDoorResponse.soap_default(soap);
	soap_default___ns7__AccessDoor(soap, &soap_tmp___ns7__AccessDoor);
	if (!soap_get___ns7__AccessDoor(soap, &soap_tmp___ns7__AccessDoor, "-ns7:AccessDoor", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->AccessDoor(soap_tmp___ns7__AccessDoor.ns7__AccessDoor, ns7__AccessDoorResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns7__AccessDoorResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns7__AccessDoorResponse.soap_put(soap, "ns7:AccessDoorResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns7__AccessDoorResponse.soap_put(soap, "ns7:AccessDoorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns7__LockDoor(DoorControlBindingService *soap)
{	struct __ns7__LockDoor soap_tmp___ns7__LockDoor;
	_ns7__LockDoorResponse ns7__LockDoorResponse;
	ns7__LockDoorResponse.soap_default(soap);
	soap_default___ns7__LockDoor(soap, &soap_tmp___ns7__LockDoor);
	if (!soap_get___ns7__LockDoor(soap, &soap_tmp___ns7__LockDoor, "-ns7:LockDoor", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LockDoor(soap_tmp___ns7__LockDoor.ns7__LockDoor, ns7__LockDoorResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns7__LockDoorResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns7__LockDoorResponse.soap_put(soap, "ns7:LockDoorResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns7__LockDoorResponse.soap_put(soap, "ns7:LockDoorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns7__UnlockDoor(DoorControlBindingService *soap)
{	struct __ns7__UnlockDoor soap_tmp___ns7__UnlockDoor;
	_ns7__UnlockDoorResponse ns7__UnlockDoorResponse;
	ns7__UnlockDoorResponse.soap_default(soap);
	soap_default___ns7__UnlockDoor(soap, &soap_tmp___ns7__UnlockDoor);
	if (!soap_get___ns7__UnlockDoor(soap, &soap_tmp___ns7__UnlockDoor, "-ns7:UnlockDoor", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->UnlockDoor(soap_tmp___ns7__UnlockDoor.ns7__UnlockDoor, ns7__UnlockDoorResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns7__UnlockDoorResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns7__UnlockDoorResponse.soap_put(soap, "ns7:UnlockDoorResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns7__UnlockDoorResponse.soap_put(soap, "ns7:UnlockDoorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns7__BlockDoor(DoorControlBindingService *soap)
{	struct __ns7__BlockDoor soap_tmp___ns7__BlockDoor;
	_ns7__BlockDoorResponse ns7__BlockDoorResponse;
	ns7__BlockDoorResponse.soap_default(soap);
	soap_default___ns7__BlockDoor(soap, &soap_tmp___ns7__BlockDoor);
	if (!soap_get___ns7__BlockDoor(soap, &soap_tmp___ns7__BlockDoor, "-ns7:BlockDoor", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->BlockDoor(soap_tmp___ns7__BlockDoor.ns7__BlockDoor, ns7__BlockDoorResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns7__BlockDoorResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns7__BlockDoorResponse.soap_put(soap, "ns7:BlockDoorResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns7__BlockDoorResponse.soap_put(soap, "ns7:BlockDoorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns7__LockDownDoor(DoorControlBindingService *soap)
{	struct __ns7__LockDownDoor soap_tmp___ns7__LockDownDoor;
	_ns7__LockDownDoorResponse ns7__LockDownDoorResponse;
	ns7__LockDownDoorResponse.soap_default(soap);
	soap_default___ns7__LockDownDoor(soap, &soap_tmp___ns7__LockDownDoor);
	if (!soap_get___ns7__LockDownDoor(soap, &soap_tmp___ns7__LockDownDoor, "-ns7:LockDownDoor", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LockDownDoor(soap_tmp___ns7__LockDownDoor.ns7__LockDownDoor, ns7__LockDownDoorResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns7__LockDownDoorResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns7__LockDownDoorResponse.soap_put(soap, "ns7:LockDownDoorResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns7__LockDownDoorResponse.soap_put(soap, "ns7:LockDownDoorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns7__LockDownReleaseDoor(DoorControlBindingService *soap)
{	struct __ns7__LockDownReleaseDoor soap_tmp___ns7__LockDownReleaseDoor;
	_ns7__LockDownReleaseDoorResponse ns7__LockDownReleaseDoorResponse;
	ns7__LockDownReleaseDoorResponse.soap_default(soap);
	soap_default___ns7__LockDownReleaseDoor(soap, &soap_tmp___ns7__LockDownReleaseDoor);
	if (!soap_get___ns7__LockDownReleaseDoor(soap, &soap_tmp___ns7__LockDownReleaseDoor, "-ns7:LockDownReleaseDoor", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LockDownReleaseDoor(soap_tmp___ns7__LockDownReleaseDoor.ns7__LockDownReleaseDoor, ns7__LockDownReleaseDoorResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns7__LockDownReleaseDoorResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns7__LockDownReleaseDoorResponse.soap_put(soap, "ns7:LockDownReleaseDoorResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns7__LockDownReleaseDoorResponse.soap_put(soap, "ns7:LockDownReleaseDoorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns7__LockOpenDoor(DoorControlBindingService *soap)
{	struct __ns7__LockOpenDoor soap_tmp___ns7__LockOpenDoor;
	_ns7__LockOpenDoorResponse ns7__LockOpenDoorResponse;
	ns7__LockOpenDoorResponse.soap_default(soap);
	soap_default___ns7__LockOpenDoor(soap, &soap_tmp___ns7__LockOpenDoor);
	if (!soap_get___ns7__LockOpenDoor(soap, &soap_tmp___ns7__LockOpenDoor, "-ns7:LockOpenDoor", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LockOpenDoor(soap_tmp___ns7__LockOpenDoor.ns7__LockOpenDoor, ns7__LockOpenDoorResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns7__LockOpenDoorResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns7__LockOpenDoorResponse.soap_put(soap, "ns7:LockOpenDoorResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns7__LockOpenDoorResponse.soap_put(soap, "ns7:LockOpenDoorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns7__LockOpenReleaseDoor(DoorControlBindingService *soap)
{	struct __ns7__LockOpenReleaseDoor soap_tmp___ns7__LockOpenReleaseDoor;
	_ns7__LockOpenReleaseDoorResponse ns7__LockOpenReleaseDoorResponse;
	ns7__LockOpenReleaseDoorResponse.soap_default(soap);
	soap_default___ns7__LockOpenReleaseDoor(soap, &soap_tmp___ns7__LockOpenReleaseDoor);
	if (!soap_get___ns7__LockOpenReleaseDoor(soap, &soap_tmp___ns7__LockOpenReleaseDoor, "-ns7:LockOpenReleaseDoor", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LockOpenReleaseDoor(soap_tmp___ns7__LockOpenReleaseDoor.ns7__LockOpenReleaseDoor, ns7__LockOpenReleaseDoorResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns7__LockOpenReleaseDoorResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns7__LockOpenReleaseDoorResponse.soap_put(soap, "ns7:LockOpenReleaseDoorResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns7__LockOpenReleaseDoorResponse.soap_put(soap, "ns7:LockOpenReleaseDoorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns7__DoubleLockDoor(DoorControlBindingService *soap)
{	struct __ns7__DoubleLockDoor soap_tmp___ns7__DoubleLockDoor;
	_ns7__DoubleLockDoorResponse ns7__DoubleLockDoorResponse;
	ns7__DoubleLockDoorResponse.soap_default(soap);
	soap_default___ns7__DoubleLockDoor(soap, &soap_tmp___ns7__DoubleLockDoor);
	if (!soap_get___ns7__DoubleLockDoor(soap, &soap_tmp___ns7__DoubleLockDoor, "-ns7:DoubleLockDoor", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->DoubleLockDoor(soap_tmp___ns7__DoubleLockDoor.ns7__DoubleLockDoor, ns7__DoubleLockDoorResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns7__DoubleLockDoorResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns7__DoubleLockDoorResponse.soap_put(soap, "ns7:DoubleLockDoorResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns7__DoubleLockDoorResponse.soap_put(soap, "ns7:DoubleLockDoorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
