/* soapProvisioningBindingService.cpp
   Generated by gSOAP 2.8.66 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapProvisioningBindingService.h"

ProvisioningBindingService::ProvisioningBindingService() : soap(SOAP_IO_DEFAULT)
{	ProvisioningBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ProvisioningBindingService::ProvisioningBindingService(const ProvisioningBindingService& rhs)
{	soap_copy_context(this, &rhs);
}

ProvisioningBindingService::ProvisioningBindingService(const struct soap &_soap) : soap(_soap)
{ }

ProvisioningBindingService::ProvisioningBindingService(soap_mode iomode) : soap(iomode)
{	ProvisioningBindingService_init(iomode, iomode);
}

ProvisioningBindingService::ProvisioningBindingService(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	ProvisioningBindingService_init(imode, omode);
}

ProvisioningBindingService::~ProvisioningBindingService()
{
	this->destroy();
}

void ProvisioningBindingService::ProvisioningBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
        {"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
        {"saml1", "urn:oasis:names:tc:SAML:1.0:assertion", NULL, NULL},
        {"saml2", "urn:oasis:names:tc:SAML:2.0:assertion", NULL, NULL},
        {"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
        {"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
        {"wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", NULL, NULL},
        {"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
        {"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
        {"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
        {"wsdd", "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01", NULL, NULL},
        {"ns12", "http://www.onvif.org/ver20/analytics", NULL, NULL},
        {"ns2", "http://www.onvif.org/ver10/pacs", NULL, NULL},
        {"ns10", "http://www.onvif.org/ver20/analytics/radiometry", NULL, NULL},
        {"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
        {"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
        {"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
        {"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
        {"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
        {"wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
        {"ns1", "http://www.onvif.org/ver10/accesscontrol/wsdl", NULL, NULL},
        {"ns11", "http://www.onvif.org/ver10/network/wsdl/", NULL, NULL},
        {"ns13", "http://www.onvif.org/ver10/schedule/wsdl", NULL, NULL},
        {"ns14", "http://www.onvif.org/ver10/thermal/wsdl", NULL, NULL},
        {"ns3", "http://www.onvif.org/ver10/accessrules/wsdl", NULL, NULL},
        {"ns4", "http://www.onvif.org/ver10/actionengine/wsdl", NULL, NULL},
        {"ns5", "http://www.onvif.org/ver10/advancedsecurity/wsdl", NULL, NULL},
        {"ns6", "http://www.onvif.org/ver10/credential/wsdl", NULL, NULL},
        {"ns7", "http://www.onvif.org/ver10/doorcontrol/wsdl", NULL, NULL},
        {"ns8", "http://www.onvif.org/ver20/media/wsdl", NULL, NULL},
        {"ns9", "http://www.onvif.org/ver10/provisioning/wsdl", NULL, NULL},
        {"tad", "http://www.onvif.org/ver10/analyticsdevice/wsdl", NULL, NULL},
        {"tan", "http://www.onvif.org/ver20/analytics/wsdl", NULL, NULL},
        {"tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
        {"tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
        {"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
        {"timg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
        {"tls", "http://www.onvif.org/ver10/display/wsdl", NULL, NULL},
        {"tmd", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL},
        {"tptz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL},
        {"trc", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL},
        {"trp", "http://www.onvif.org/ver10/replay/wsdl", NULL, NULL},
        {"trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
        {"trv", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL},
        {"tse", "http://www.onvif.org/ver10/search/wsdl", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

void ProvisioningBindingService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void ProvisioningBindingService::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	ProvisioningBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
ProvisioningBindingService *ProvisioningBindingService::copy()
{	ProvisioningBindingService *dup = SOAP_NEW_UNMANAGED(ProvisioningBindingService(*(struct soap*)this));
	return dup;
}
#endif

ProvisioningBindingService& ProvisioningBindingService::operator=(const ProvisioningBindingService& rhs)
{	soap_done(this);
	soap_copy_context(this, &rhs);
	return *this;
}

int ProvisioningBindingService::soap_close_socket()
{	return soap_closesock(this);
}

int ProvisioningBindingService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int ProvisioningBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int ProvisioningBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int ProvisioningBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int ProvisioningBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void ProvisioningBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ProvisioningBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *ProvisioningBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void ProvisioningBindingService::soap_noheader()
{	this->header = NULL;
}

void ProvisioningBindingService::soap_header(struct _wsse__Security *wsse__Security, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct wsdd__AppSequenceType *wsdd__AppSequence)
{	::soap_header(this);
	this->header->wsse__Security = wsse__Security;
	this->header->wsa5__MessageID = wsa5__MessageID;
	this->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->header->wsa5__From = wsa5__From;
	this->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->header->wsa5__FaultTo = wsa5__FaultTo;
	this->header->wsa5__To = wsa5__To;
	this->header->wsa5__Action = wsa5__Action;
	this->header->chan__ChannelInstance = chan__ChannelInstance;
	this->header->wsdd__AppSequence = wsdd__AppSequence;
}

::SOAP_ENV__Header *ProvisioningBindingService::soap_header()
{	return this->header;
}

#ifndef WITH_NOIO
int ProvisioningBindingService::run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ProvisioningBindingService::ssl_run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->error;
}
#endif

SOAP_SOCKET ProvisioningBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET ProvisioningBindingService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ProvisioningBindingService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif
#endif

int ProvisioningBindingService::serve()
{
#ifndef WITH_FASTCGI
	this->keep_alive = this->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->keep_alive > 0 && this->max_keep_alive > 0)
			this->keep_alive--;
#endif
		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if ((dispatch() || (this->fserveloop && this->fserveloop(this))) && this->error && this->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns9__GetServiceCapabilities(ProvisioningBindingService*);
static int serve___ns9__PanMove(ProvisioningBindingService*);
static int serve___ns9__TiltMove(ProvisioningBindingService*);
static int serve___ns9__ZoomMove(ProvisioningBindingService*);
static int serve___ns9__RollMove(ProvisioningBindingService*);
static int serve___ns9__FocusMove(ProvisioningBindingService*);
static int serve___ns9__Stop(ProvisioningBindingService*);
static int serve___ns9__GetUsage(ProvisioningBindingService*);

int ProvisioningBindingService::dispatch()
{
	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns9:GetServiceCapabilities"))
		return serve___ns9__GetServiceCapabilities(this);
	if (!soap_match_tag(this, this->tag, "ns9:PanMove"))
		return serve___ns9__PanMove(this);
	if (!soap_match_tag(this, this->tag, "ns9:TiltMove"))
		return serve___ns9__TiltMove(this);
	if (!soap_match_tag(this, this->tag, "ns9:ZoomMove"))
		return serve___ns9__ZoomMove(this);
	if (!soap_match_tag(this, this->tag, "ns9:RollMove"))
		return serve___ns9__RollMove(this);
	if (!soap_match_tag(this, this->tag, "ns9:FocusMove"))
		return serve___ns9__FocusMove(this);
	if (!soap_match_tag(this, this->tag, "ns9:Stop"))
		return serve___ns9__Stop(this);
	if (!soap_match_tag(this, this->tag, "ns9:GetUsage"))
		return serve___ns9__GetUsage(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve___ns9__GetServiceCapabilities(ProvisioningBindingService *soap)
{	struct __ns9__GetServiceCapabilities soap_tmp___ns9__GetServiceCapabilities;
	_ns9__GetServiceCapabilitiesResponse ns9__GetServiceCapabilitiesResponse;
	ns9__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___ns9__GetServiceCapabilities(soap, &soap_tmp___ns9__GetServiceCapabilities);
	if (!soap_get___ns9__GetServiceCapabilities(soap, &soap_tmp___ns9__GetServiceCapabilities, "-ns9:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetServiceCapabilities(soap_tmp___ns9__GetServiceCapabilities.ns9__GetServiceCapabilities, ns9__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns9__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns9__GetServiceCapabilitiesResponse.soap_put(soap, "ns9:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns9__GetServiceCapabilitiesResponse.soap_put(soap, "ns9:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns9__PanMove(ProvisioningBindingService *soap)
{	struct __ns9__PanMove soap_tmp___ns9__PanMove;
	_ns9__PanMoveResponse ns9__PanMoveResponse;
	ns9__PanMoveResponse.soap_default(soap);
	soap_default___ns9__PanMove(soap, &soap_tmp___ns9__PanMove);
	if (!soap_get___ns9__PanMove(soap, &soap_tmp___ns9__PanMove, "-ns9:PanMove", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->PanMove(soap_tmp___ns9__PanMove.ns9__PanMove, ns9__PanMoveResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns9__PanMoveResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns9__PanMoveResponse.soap_put(soap, "ns9:PanMoveResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns9__PanMoveResponse.soap_put(soap, "ns9:PanMoveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns9__TiltMove(ProvisioningBindingService *soap)
{	struct __ns9__TiltMove soap_tmp___ns9__TiltMove;
	_ns9__TiltMoveResponse ns9__TiltMoveResponse;
	ns9__TiltMoveResponse.soap_default(soap);
	soap_default___ns9__TiltMove(soap, &soap_tmp___ns9__TiltMove);
	if (!soap_get___ns9__TiltMove(soap, &soap_tmp___ns9__TiltMove, "-ns9:TiltMove", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->TiltMove(soap_tmp___ns9__TiltMove.ns9__TiltMove, ns9__TiltMoveResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns9__TiltMoveResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns9__TiltMoveResponse.soap_put(soap, "ns9:TiltMoveResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns9__TiltMoveResponse.soap_put(soap, "ns9:TiltMoveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns9__ZoomMove(ProvisioningBindingService *soap)
{	struct __ns9__ZoomMove soap_tmp___ns9__ZoomMove;
	_ns9__ZoomMoveResponse ns9__ZoomMoveResponse;
	ns9__ZoomMoveResponse.soap_default(soap);
	soap_default___ns9__ZoomMove(soap, &soap_tmp___ns9__ZoomMove);
	if (!soap_get___ns9__ZoomMove(soap, &soap_tmp___ns9__ZoomMove, "-ns9:ZoomMove", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->ZoomMove(soap_tmp___ns9__ZoomMove.ns9__ZoomMove, ns9__ZoomMoveResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns9__ZoomMoveResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns9__ZoomMoveResponse.soap_put(soap, "ns9:ZoomMoveResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns9__ZoomMoveResponse.soap_put(soap, "ns9:ZoomMoveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns9__RollMove(ProvisioningBindingService *soap)
{	struct __ns9__RollMove soap_tmp___ns9__RollMove;
	_ns9__RollMoveResponse ns9__RollMoveResponse;
	ns9__RollMoveResponse.soap_default(soap);
	soap_default___ns9__RollMove(soap, &soap_tmp___ns9__RollMove);
	if (!soap_get___ns9__RollMove(soap, &soap_tmp___ns9__RollMove, "-ns9:RollMove", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->RollMove(soap_tmp___ns9__RollMove.ns9__RollMove, ns9__RollMoveResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns9__RollMoveResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns9__RollMoveResponse.soap_put(soap, "ns9:RollMoveResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns9__RollMoveResponse.soap_put(soap, "ns9:RollMoveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns9__FocusMove(ProvisioningBindingService *soap)
{	struct __ns9__FocusMove soap_tmp___ns9__FocusMove;
	_ns9__FocusMoveResponse ns9__FocusMoveResponse;
	ns9__FocusMoveResponse.soap_default(soap);
	soap_default___ns9__FocusMove(soap, &soap_tmp___ns9__FocusMove);
	if (!soap_get___ns9__FocusMove(soap, &soap_tmp___ns9__FocusMove, "-ns9:FocusMove", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->FocusMove(soap_tmp___ns9__FocusMove.ns9__FocusMove, ns9__FocusMoveResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns9__FocusMoveResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns9__FocusMoveResponse.soap_put(soap, "ns9:FocusMoveResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns9__FocusMoveResponse.soap_put(soap, "ns9:FocusMoveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns9__Stop(ProvisioningBindingService *soap)
{	struct __ns9__Stop soap_tmp___ns9__Stop;
	_ns9__StopResponse ns9__StopResponse;
	ns9__StopResponse.soap_default(soap);
	soap_default___ns9__Stop(soap, &soap_tmp___ns9__Stop);
	if (!soap_get___ns9__Stop(soap, &soap_tmp___ns9__Stop, "-ns9:Stop", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Stop(soap_tmp___ns9__Stop.ns9__Stop, ns9__StopResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns9__StopResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns9__StopResponse.soap_put(soap, "ns9:StopResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns9__StopResponse.soap_put(soap, "ns9:StopResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns9__GetUsage(ProvisioningBindingService *soap)
{	struct __ns9__GetUsage soap_tmp___ns9__GetUsage;
	_ns9__GetUsageResponse ns9__GetUsageResponse;
	ns9__GetUsageResponse.soap_default(soap);
	soap_default___ns9__GetUsage(soap, &soap_tmp___ns9__GetUsage);
	if (!soap_get___ns9__GetUsage(soap, &soap_tmp___ns9__GetUsage, "-ns9:GetUsage", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetUsage(soap_tmp___ns9__GetUsage.ns9__GetUsage, ns9__GetUsageResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns9__GetUsageResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns9__GetUsageResponse.soap_put(soap, "ns9:GetUsageResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns9__GetUsageResponse.soap_put(soap, "ns9:GetUsageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
